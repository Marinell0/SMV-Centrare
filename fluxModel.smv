-- /*---------------------------------------------------------------------------.
--  | Path quantifier:                                                          |
--  |     A—“for every path”                                                    |
--  |     E—“there exists a path”                                               |
--  | State quantifier:                                                         |
--  |     Fp—p holds sometime in the future                                     |
--  |     Gp—p holds globally in the future                                     |
--  |     Xp—p holds next time                                                  |
--  |     pUq—p holds until q holds                                             |
--  |                                                                           |
--  | Examples:                                                                 |
--  | EF(started & !ready): it is possible to get to a state                    |
--  | where started holds but ready does not hold.                              |
--  |                                                                           |
--  | AG(req -> AF ack): if a request occurs, then it will be                   |
--  | eventually acknowledged.                                                  |
--  |                                                                           |
--  | AG(AF device enabled): enabled holds infinitely often                     |
--  | on every computation path.                                                |
--  |                                                                           |
--  | AG(EF restart): from any state it is possible to get to                   |
--  | the restart state.                                                        |
--  `--------------------------------------------------------------------------'*/

MODULE Diagnostico
VAR
-- Diagnostico
	diagnosticado: boolean;

	posicao: {empty, esq, dir, med};
	situacao: {empty, completa, incompleta, submucosa};
	palato: {empty, duro, mole};
	tipo: {pre, pos, trans};
	lado: {empty, uni, bi};
ASSIGN
	init(diagnosticado) := FALSE;
	next(diagnosticado) := case
								!diagnosticado 	: TRUE;
								TRUE			: diagnosticado;
							esac;

	init(posicao) := empty;
	next(posicao):=	case
						!diagnosticado & tipo = pos					: empty;
						!diagnosticado & tipo = pre & lado = bi		: {esq, dir};
						!diagnosticado								: {esq, dir, med};
						TRUE										: posicao;
					esac;

	init(situacao) := empty;
	next(situacao):=case
						!diagnosticado & tipo = trans				: empty;
						!diagnosticado & tipo = pre					: {completa, incompleta};
						!diagnosticado								: {completa, incompleta, submucosa};
						TRUE										: situacao;
					esac;

	init(palato) := empty;
	next(palato) :=	case
						!diagnosticado & (tipo = pre | tipo = trans | (tipo = pos & situacao != incompleta))	: empty;
						!diagnosticado																			: {duro, mole};
						TRUE																					: palato;
					esac;

	next(tipo) :=	case
						!diagnosticado								: {pre, pos, trans};
						TRUE										: tipo;
					esac;

	init(lado) := empty;
	next(lado) :=	case
						!diagnosticado & tipo = pos					: empty;
						!diagnosticado								: {uni, bi};
						TRUE										: lado;
					esac;

MODULE Cirurgia(diagnostico)
VAR
	passouCirurgia: boolean;
	labioUnilateral: CirurgiaGeral(labioUnilateral); --
	labioBilateral: CirurgiaGeral(labioBilateral); --
	fissuraPalato: CirurgiaGeral(fissuraPalato); --
	cirurgiaNariz: CirurgiaGeral(cirurgiaNariz);
	reparo2Palato: CirurgiaGeral(reparo2Palato);
	reparoFistulas: CirurgiaGeral(reparoFistulas);
	enxertoOsseo: CirurgiaGeral(enxertoOsseo);
ASSIGN
	init(passouCirurgia) := FALSE;
	next(passouCirurgia) :=	case
								labioUnilateral.fezCirurgia | labioBilateral.fezCirurgia |
								fissuraPalato.fezCirurgia | cirurgiaNariz.fezCirurgia |
								reparo2Palato.fezCirurgia | reparoFistulas.fezCirurgia |
								enxertoOsseo.fezCirurgia						: TRUE;
								TRUE											: FALSE;
							esac;

MODULE CirurgiaGeral(name)
VAR
	fezCirurgia: boolean;
	state: {empty, operando, posOperatorio};
	resultado: {empty, bom, reavaliar, reoperar};
FROZENVAR
	necessarioCirurgia: boolean;
ASSIGN
	init(fezCirurgia) := FALSE;
	next(fezCirurgia) := case
							necessarioCirurgia & state = posOperatorio & resultado = bom			: TRUE;
							TRUE																	: fezCirurgia;
						esac;

	init(state) := empty;
	next(state) := case
						necessarioCirurgia & !fezCirurgia &
						state = empty													: operando;

						necessarioCirurgia & !fezCirurgia &
						state = operando & 
						(resultado = empty | resultado = reoperar)						: posOperatorio;

						necessarioCirurgia & !fezCirurgia &
						 state = posOperatorio & 
						(resultado = reoperar | resultado = reavaliar) 					: operando;

						necessarioCirurgia & !fezCirurgia &
						state != posOperatorio & resultado = bom						: posOperatorio;
						
						TRUE															: state;
					esac;

	init(resultado) := empty;
	next(resultado) := case
						necessarioCirurgia & !fezCirurgia & state = posOperatorio & resultado = reavaliar		: {bom, reoperar};
						necessarioCirurgia & !fezCirurgia & state = posOperatorio & resultado = reoperar		: bom;
						necessarioCirurgia & !fezCirurgia & state = posOperatorio & resultado != bom			: {bom, reoperar, reavaliar};
						TRUE 																					: resultado;
					esac;

MODULE Ortodontia
VAR
	passouOrtodontia: boolean;
	ortodontiaNeonatal: OrtodontiaGeral(ortodontiaNeonatal, FALSE);
	ortodontiaPreEnxerto: OrtodontiaGeral(ortodontiaPreEnxerto, TRUE);
	ortodontiaCorretiva: OrtodontiaGeral(ortodontiaCorretiva, TRUE);
ASSIGN 
	init(passouOrtodontia) := FALSE;
	next(passouOrtodontia) := case
								ortodontiaNeonatal.fezOrtodontia |
								ortodontiaPreEnxerto.fezOrtodontia | 
								ortodontiaCorretiva.fezOrtodontia				: TRUE;
								TRUE											: passouOrtodontia;
							esac;

MODULE OrtodontiaGeral(name, temDiagnostico)
VAR
	fezOrtodontia: boolean;
	state: {empty, emTratamento, diagnostico};
FROZENVAR
	necessarioOrtodontia: boolean;
ASSIGN
	init(fezOrtodontia) := FALSE;
	next(fezOrtodontia) := case
								necessarioOrtodontia & temDiagnostico & state = diagnostico 		: TRUE;
								necessarioOrtodontia & !temDiagnostico & state = emTratamento		: TRUE;
								TRUE																: fezOrtodontia;
							esac;

	init(state):= empty;
	next(state):= case
						necessarioOrtodontia & state != emTratamento						: emTratamento;
						necessarioOrtodontia & temDiagnostico & state = emTratamento		: diagnostico;
						TRUE 																: state;
					esac;

MODULE Nutricao
VAR
	passouNutricao: boolean;
FROZENVAR
	necessarioNutricao: boolean;
ASSIGN
	init(passouNutricao) := FALSE;
	next(passouNutricao) := case
								necessarioNutricao & !passouNutricao		: TRUE;
								TRUE										: passouNutricao;
							esac;

MODULE Psicologia
VAR
	passouPsicologia: boolean;
FROZENVAR 
	necessarioPsicologia: boolean;
ASSIGN
	init(passouPsicologia) := FALSE;
	next(passouPsicologia) := case
								necessarioPsicologia & !passouPsicologia		: TRUE;
								TRUE											: passouPsicologia;
							esac;

MODULE main
VAR
	fimTratamento: boolean;
	diagnostico: Diagnostico;
	cirurgia: Cirurgia(diagnostico);
	ortodontia: Ortodontia;
	nutricao: Nutricao;
	psicologia: Psicologia;
ASSIGN
	init(fimTratamento) := FALSE;
	next(fimTratamento) := case
								diagnostico.diagnosticado | cirurgia.passouCirurgia |
								ortodontia.passouOrtodontia | nutricao.passouNutricao | psicologia.passouPsicologia 	: TRUE;
								TRUE																					: fimTratamento;
							esac;

-- Modeled specs
-- Needs to be true
CTLSPEC 
	AG (AF fimTratamento);
CTLSPEC
 	AF (fimTratamento & diagnostico.diagnosticado | (cirurgia.passouCirurgia | ortodontia.passouOrtodontia | nutricao.passouNutricao | psicologia.passouPsicologia));
CTLSPEC
 	EF (!ortodontia.passouOrtodontia);
CTLSPEC
	-- so pode fazer cirurgia de enxerto osseo se foi feito o preparo ortodontico
	-- se fez preparo pre enxerto, entao fatalmente ele fará a cirurgia de enxerto ósseo
	AG ((!ortodontia.ortodontiaPreEnxerto.necessarioOrtodontia | !cirurgia.enxertoOsseo.necessarioCirurgia) |
	    (ortodontia.ortodontiaPreEnxerto.necessarioOrtodontia & cirurgia.enxertoOsseo.necessarioCirurgia) &
		(ortodontia.ortodontiaPreEnxerto.fezOrtodontia -> AF cirurgia.enxertoOsseo.fezCirurgia));
--CTLSPEC
	-- nao pode fazer cirurgia de labio sem preparo ortodontico


-- -- Needs to be false
CTLSPEC
	-- ele nao pode fazer a cirurgia de enxerto osseo sem ter feito o preparo ortodontico primeiro
	-- esta dando true e eu nao sei o por que ainda
	AG ((!ortodontia.ortodontiaPreEnxerto.necessarioOrtodontia | !cirurgia.enxertoOsseo.necessarioCirurgia) |
		(cirurgia.enxertoOsseo.necessarioCirurgia & ortodontia.ortodontiaPreEnxerto.necessarioOrtodontia &
		(!cirurgia.enxertoOsseo.fezCirurgia & !ortodontia.ortodontiaPreEnxerto.fezOrtodontia) | 
		A [ortodontia.ortodontiaPreEnxerto.fezOrtodontia U cirurgia.enxertoOsseo.fezCirurgia]))
CTLSPEC
	AG (AF (fimTratamento -> (!diagnostico.diagnosticado & !cirurgia.passouCirurgia & !ortodontia.passouOrtodontia & !nutricao.passouNutricao & !psicologia.passouPsicologia)));
CTLSPEC
	AF (!diagnostico.diagnosticado & cirurgia.passouCirurgia);
CTLSPEC
	-- pessoas com fissura pos-forame nao fazem cirurgia de labio, so palato.
	EF (diagnostico.tipo = pos & cirurgia.labioUnilateral.fezCirurgia);
CTLSPEC
	-- fissura pre-foram nao realiza palatoplastia
	EF (diagnostico.tipo = pre & cirurgia.fissuraPalato.fezCirurgia);
CTLSPEC
	-- verifica se a cirurgia de labio unilateral pode ser feita mais de uma vez (o modelo não deve deixar)
	E [(AF cirurgia.labioUnilateral.fezCirurgia) U (EF !cirurgia.labioUnilateral.fezCirurgia)];
CTLSPEC
	E [(AF cirurgia.labioUnilateral.fezCirurgia) U (EF cirurgia.labioUnilateral.fezCirurgia)];
CTLSPEC
	(!cirurgia.enxertoOsseo.necessarioCirurgia | !ortodontia.ortodontiaPreEnxerto.necessarioOrtodontia) xor EF (cirurgia.enxertoOsseo.fezCirurgia & !ortodontia.ortodontiaPreEnxerto.fezOrtodontia);
LTLSPEC
	O (cirurgia.enxertoOsseo.fezCirurgia & !ortodontia.ortodontiaPreEnxerto.fezOrtodontia);


