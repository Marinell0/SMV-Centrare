-- /*---------------------------------------------------------------------------.
--  | Path quantifier:                                                          |
--  |     A—“for every path”                                                    |
--  |     E—“there exists a path”                                               |
--  | State quantifier:                                                         |
--  |     Fp—p holds sometime in the future                                     |
--  |     Gp—p holds globally in the future                                     |
--  |     Xp—p holds next time                                                  |
--  |     pUq—p holds until q holds                                             |
--  |                                                                           |
--  | Examples:                                                                 |
--  | EF(started & !ready): it is possible to get to a state                    |
--  | where started holds but ready does not hold.                              |
--  |                                                                           |
--  | AG(req -> AF ack): if a request occurs, then it will be                   |
--  | eventually acknowledged.                                                  |
--  |                                                                           |
--  | AG(AF device enabled): enabled holds infinitely often                     |
--  | on every computation path.                                                |
--  |                                                                           |
--  | AG(EF restart): from any state it is possible to get to                   |
--  | the restart state.                                                        |
--  `--------------------------------------------------------------------------'*/
MODULE main
VAR
-- Diagnostico
	posicao: {empty, esq, dir, med};
	situacao: {empty, completa, incompleta, submucosa};
	palato: {empty, duro, mole};
	tipo: {pre, pos, trans};
	lado: {empty, uni, bi};
	diagnosticado: boolean;
    
-- Cirurgias
	passouCirurgia: boolean;
	resultado: {empty, bom, reavaliar, reoperar};

-- Ortodontia
	passouOrtodontia: boolean;

-- Nutrição
	passouNutricao: boolean;

-- Psicologia
	passouPsicologia: boolean;

-- Estados
	state: {identificacao, 
				diagnostico, 
				cirurgias, 
					labioUnilateral, 
					labioBilateral, 
					fissuraPalato1, 
					cirurgiaNariz, 
					reparo2Palato, 
					reparoFistulas, 
					enxertoOsseo,
						posOperatorio,
				ortodontia, 
					ortodontiaNeonatal, 
					ortodontiaPreEnxerto,
						diagnosticoOrtoPreEnxerto,
					ortodontiaCorretiva,
						diagnosticoOrtoCorretiva,
				nutricao,
					condicaoNutricional,
				psicologia,
					dadosPsicologia,
						fimTratamento};
	

ASSIGN
	-- ESTADOS --
	init(state) := identificacao;
	next(state) := case
						state = identificacao & !diagnosticado					: diagnostico;
						state = identificacao & !passouCirurgia					: cirurgias;
						state = identificacao & !passouOrtodontia				: ortodontia;
						state = identificacao & !passouNutricao					: nutricao;
						state = identificacao & !passouPsicologia				: psicologia;
						state = identificacao & diagnosticado & passouCirurgia &
						passouOrtodontia & passouNutricao & passouPsicologia	: fimTratamento;
						-- state = identificacao									: {ortodontia, nutricao, psicologia};

						state = diagnostico										: identificacao;

						state = cirurgias & !passouCirurgia						: {labioUnilateral, labioBilateral, fissuraPalato1, cirurgiaNariz, reparo2Palato, reparoFistulas, enxertoOsseo};
						state = labioUnilateral | state = labioBilateral |
						state = fissuraPalato1 | state = cirurgiaNariz |
						state = reparo2Palato| state = reparoFistulas |
						state = enxertoOsseo									: posOperatorio;
						state = posOperatorio & resultado != bom				: cirurgias;
						state = posOperatorio & resultado = bom					: identificacao;

						state = ortodontia										: {ortodontiaNeonatal, ortodontiaPreEnxerto, ortodontiaCorretiva};
						state = ortodontiaNeonatal 								: identificacao;
						state = ortodontiaPreEnxerto							: diagnosticoOrtoPreEnxerto;
						state = ortodontiaCorretiva								: diagnosticoOrtoCorretiva;
						state = diagnosticoOrtoPreEnxerto |
						state = diagnosticoOrtoCorretiva						: identificacao;

						state = nutricao										: condicaoNutricional;
						state = condicaoNutricional								: identificacao;

						state = psicologia										: dadosPsicologia;
						state = dadosPsicologia									: identificacao;

						TRUE : state;
					esac;

	-- DIAGNOSTICO --
	next(tipo) :=	case
						state = diagnostico												: {pre, pos, trans};
						TRUE															: tipo;
					esac;

	init(lado) := empty;
	next(lado) :=	case
						state = diagnostico & tipo = pos					: empty;
						state = diagnostico									: {uni, bi};
						TRUE												: lado;
					esac;

	init(posicao) := empty;
	next(posicao):=	case
						state = diagnostico & tipo = pos					: empty;
						state = diagnostico & tipo = pre & lado = bi		: {esq, dir};
						state = diagnostico									: {esq, dir, med};
						TRUE												: posicao;
					esac;

	init(palato) := empty;
	next(palato) :=	case
						state = diagnostico & (tipo = pre | tipo = trans | (tipo = pos & situacao != incompleta))	: empty;
						state = diagnostico													: {duro, mole};
						TRUE																: palato;
					esac;

	init(situacao) := empty;
	next(situacao):=case
						state = diagnostico & tipo = trans			: empty;
						state = diagnostico & tipo = pre			: {completa, incompleta};
						state = diagnostico							: {completa, incompleta, submucosa};
						TRUE										: situacao;
					esac;

	init(diagnosticado) := FALSE;
	next(diagnosticado):=case
							state = diagnostico							: TRUE;
							TRUE										: diagnosticado;
						esac;

-- CIRURGIAS --
	init(passouCirurgia) := FALSE;
	next(passouCirurgia):=	case
								state = posOperatorio & resultado = bom 		: TRUE;
								state = posOperatorio & resultado = reavaliar	: FALSE;
								state = posOperatorio & resultado = reoperar	: FALSE;
								TRUE											: passouCirurgia;
							esac;

-- ORTODONTIA --
	init(passouOrtodontia) := FALSE;
	next(passouOrtodontia) := case
								state = ortodontiaNeonatal |
								state = diagnosticoOrtoCorretiva |
								state = diagnosticoOrtoPreEnxerto				: TRUE;
								TRUE											: passouOrtodontia;
							esac;

-- NUTRIÇÃO --
	init(passouNutricao) := FALSE;
	next(passouNutricao) := case
								state = condicaoNutricional						: TRUE;
								TRUE											: passouNutricao;
							esac;

-- PSICOLOGIA
	init(passouPsicologia) := FALSE;
	next(passouPsicologia) := case
								state = dadosPsicologia							: TRUE;
								TRUE											: passouPsicologia;
							esac;

		
	init(resultado) := empty;
	next(resultado) := case
						(state = labioUnilateral |
						state = labioBilateral |
						state = fissuraPalato1 | 
						state = cirurgiaNariz | 
						state = reparo2Palato |
						state = reparoFistulas |
						state = enxertoOsseo) & resultado = reavaliar				: {bom, reoperar};
						(state = labioUnilateral |
						state = labioBilateral |
						state = fissuraPalato1 | 
						state = cirurgiaNariz | 
						state = reparo2Palato |
						state = reparoFistulas |
						state = enxertoOsseo) & resultado = reoperar				: bom;
						(state = labioUnilateral |
						state = labioBilateral |
						state = fissuraPalato1 | 
						state = cirurgiaNariz | 
						state = reparo2Palato |
						state = reparoFistulas |
						state = enxertoOsseo) & resultado != bom					: {bom, reoperar, reavaliar};
						TRUE 														: resultado;
					esac;
-- Modeled specs
SPEC
	AF state = fimTratamento
SPEC
	(EF (tipo = pre & lado = bi)) -> AF(posicao != med)
SPEC
	(EF (tipo = pre)) -> AF(palato = empty & situacao != submucosa)
SPEC
	(EF (tipo = pos)) -> AF(lado = empty & posicao = empty)
SPEC
	(EF (tipo = pos & situacao != incompleta)) -> AF (palato = empty)
SPEC
	(EF tipo = trans) -> AF(situacao = empty & palato = empty)

-- Needs to be false
SPEC
	(EF (tipo = pre & lado = bi)) -> posicao = med
SPEC
	(EF (tipo = pre)) -> (palato != empty | situacao = submucosa)
SPEC
	(EF tipo = pos) -> (lado != empty | posicao != empty)
SPEC 
	(EF (tipo = pos & situacao != incompleta)) -> palato != empty
SPEC
	(EF tipo = trans) -> (situacao != empty | palato != empty)
SPEC
	AF (state = fimTratamento & resultado != bom)

-- will be true (since that's how it's modeled in Flux) but shouldn't be
-- because it violates the line of care (linha de cuidado)
SPEC
	EF (state = labioUnilateral & lado != uni)